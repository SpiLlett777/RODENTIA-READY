using UnityEngine;
using System.Collections;

public class Invulnerability : MonoBehaviour
{
    private SpriteRenderer spriteRenderer;
    private Color originalColor;
    public Color damageColor = new Color(1f, 0f, 0f);

    public bool isInvulnerable { get; private set; } = false;
    private float invulnerabilityDuration = 0.5f;

    private void Awake()
    {
        spriteRenderer = GetComponent<SpriteRenderer>();
        originalColor = spriteRenderer.color;
    }

    public void StartColorChange()
    {
        if (!isInvulnerable)
        {
            StartCoroutine(ChangeColorOverTime(damageColor, 0.2f));
        }
    }

    private IEnumerator ChangeColorOverTime(Color targetColor, float duration)
    {
        isInvulnerable = true;

        float elapsedTime = 0f;
        Color startColor = spriteRenderer.color;

        while (elapsedTime < duration)
        {
            spriteRenderer.color = Color.Lerp(startColor, targetColor, elapsedTime / duration);
            elapsedTime += Time.deltaTime;
            yield return null;
        }

        spriteRenderer.color = targetColor;

        yield return new WaitForSeconds(0.2f);

        elapsedTime = 0f;
        startColor = spriteRenderer.color;
        while (elapsedTime < duration)
        {
            spriteRenderer.color = Color.Lerp(startColor, originalColor, elapsedTime / duration);
            elapsedTime += Time.deltaTime;
            yield return null;
        }

        spriteRenderer.color = originalColor;

        yield return new WaitForSeconds(invulnerabilityDuration - duration * 2 - 0.2f);
        isInvulnerable = false;
    }
}